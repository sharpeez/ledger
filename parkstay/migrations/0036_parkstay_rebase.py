# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2017-09-21 09:11
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import parkstay.models

def create_booking_invoice_records(apps, schema_editor):
    Booking = apps.get_model('parkstay','Booking')
    BookingInvoice = apps.get_model('parkstay','BookingInvoice')
    try:
        for b in Booking.objects.all():
            if b.invoice_reference:
                BookingInvoice.objects.create(booking=b,invoice_reference=b.invoice_reference)
    except Exception as e:
        traceback.print_exc()
        raise e

def forward_func(apps, schema_editor):
    Booking = apps.get_model('parkstay','Booking')

    for b in Booking.objects.all():
        b.confirmation_sent = True
        b.save()

def reverse_func(apps, schema_editor):
    Booking = apps.get_model('parkstay','Booking')

    for b in Booking.objects.all():
        b.confirmation_sent = False 
        b.save()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('parkstay', '0035_auto_20161228_1735'),
    ]

    operations = [
        migrations.RunSQL(
            sql="""CREATE OR REPLACE VIEW parkstay_campsiteclass_pricehistory_v AS
                SELECT DISTINCT classes.campsite_class_id AS id,
                classes.date_start,
                classes.date_end,
                r.id AS rate_id,
                r.adult,
                r.concession,
                r.child,
                classes.details,
                classes.reason_id,
                r.infant
                FROM parkstay_rate r
                INNER JOIN (
                    SELECT distinct cc.id AS campsite_class_id,
                    cr.rate_id AS campsite_rate_id,
                    cr.date_start AS date_start,
                    cr.date_end AS date_end,
                    cr.details AS details,
                    cr.reason_id AS reason_id
                    FROM parkstay_campsite cs,
                    parkstay_campsiteclass cc,
                    parkstay_campsiterate cr
                    WHERE cs.campsite_class_id = cc.id AND
                    cr.campsite_id = cs.id AND
                    cr.update_level = 1
                ) classes ON r.id = classes.campsite_rate_id;""",
        ),
        migrations.RunSQL(
            sql="""CREATE OR REPLACE VIEW parkstay_campground_pricehistory_v AS
                SELECT DISTINCT camps.campground_id AS id,
                cr.date_start,
                cr.date_end,
                r.id AS rate_id,
                r.adult,
                r.concession,
                r.child,
                cr.details,
                cr.reason_id,
                r.infant
                FROM parkstay_campsiterate cr
                INNER JOIN parkstay_rate r ON r.id = cr.rate_id
                INNER JOIN (
                    SELECT cg.id AS campground_id,
                    cs.name AS name,
                    cs.id AS campsite_id
                    FROM parkstay_campsite cs,
                    parkstay_campground cg
                    WHERE cs.campground_id = cg.id AND
                    cg.id = cs.campground_id AND
                    cg.price_level = 0
                ) camps ON cr.campsite_id = camps.campsite_id;""",
        ),
        migrations.CreateModel(
            name='BookingInvoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_reference', models.CharField(blank=True, default='', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BookingVehicleRego',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rego', models.CharField(max_length=50)),
                ('type', models.CharField(choices=[('vehicle', 'Vehicle'), ('motorbike', 'Motorcycle'), ('concession', 'Vehicle (concession)')], max_length=10)),
                ('entry_fee', models.BooleanField(default=False)),
                ('park_entry_fee', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CampgroundGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CampgroundStayHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('min_days', models.SmallIntegerField(default=1)),
                ('max_days', models.SmallIntegerField(default=28)),
                ('min_dba', models.SmallIntegerField(default=0)),
                ('max_dba', models.SmallIntegerField(default=180)),
                ('details', models.TextField(blank=True, null=True)),
                ('range_start', models.DateField(blank=True, null=True)),
                ('range_end', models.DateField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutstandingBookingRecipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='ParkEntryRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle', models.DecimalField(decimal_places=2, default='0.00', max_digits=8)),
                ('concession', models.DecimalField(decimal_places=2, default='0.00', max_digits=8)),
                ('motorbike', models.DecimalField(decimal_places=2, default='0.00', max_digits=8)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField(blank=True, null=True)),
                ('details', models.TextField(blank=True, null=True)),
                ('reason', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='parkstay.PriceReason')),
            ],
        ),
        migrations.RemoveField(
            model_name='campground',
            name='customer_contact',
        ),
        migrations.AddField(
            model_name='booking',
            name='booking_type',
            field=models.SmallIntegerField(choices=[(0, 'Reception booking'), (1, 'Internet booking'), (2, 'Black booking'), (3, 'Temporary reservation')], default=0),
        ),
        migrations.AddField(
            model_name='booking',
            name='cancellation_reason',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='booking',
            name='confirmation_sent',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='booking',
            name='created',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='booking',
            name='customer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='booking',
            name='expiry_time',
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name='booking',
            name='is_canceled',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='campground',
            name='campground_map',
            field=models.FileField(blank=True, null=True, upload_to=parkstay.models.update_campground_map_filename),
        ),
        migrations.AddField(
            model_name='campground',
            name='info_url',
            field=models.CharField(blank=True, max_length=255),
        ),
        migrations.AddField(
            model_name='campground',
            name='long_description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='campground',
            name='max_advance_booking',
            field=models.IntegerField(default=180),
        ),
        migrations.AddField(
            model_name='campground',
            name='oracle_code',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='campsiteclass',
            name='max_vehicles',
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AddField(
            model_name='contact',
            name='description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='contact',
            name='email',
            field=models.EmailField(default='whut@whut', max_length=255),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='contact',
            name='opening_hours',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='contact',
            name='other_services',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='park',
            name='oracle_code',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='park',
            name='wkb_geometry',
            field=django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326),
        ),
        migrations.AddField(
            model_name='promoarea',
            name='wkb_geometry',
            field=django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326),
        ),
        migrations.AlterField(
            model_name='booking',
            name='legacy_id',
            field=models.IntegerField(blank=True, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='booking',
            name='legacy_name',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='campground',
            name='address',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='campground',
            name='campground_type',
            field=models.SmallIntegerField(choices=[(0, 'Bookable Online'), (1, 'Not Bookable Online'), (2, 'Other Accomodation'), (3, 'Unpublished')], default=3),
        ),
        migrations.AlterField(
            model_name='campground',
            name='site_type',
            field=models.SmallIntegerField(choices=[(0, 'Bookable Per Site'), (1, 'Bookable Per Site Type'), (2, 'Bookable Per Site Type (hide site number)')], default=0),
        ),
        migrations.AlterField(
            model_name='campsitebooking',
            name='booking',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='campsites', to='parkstay.Booking'),
        ),
        migrations.AlterField(
            model_name='campsitebooking',
            name='booking_type',
            field=models.SmallIntegerField(choices=[(0, 'Reception booking'), (1, 'Internet booking'), (2, 'Black booking'), (3, 'Temporary reservation')], default=0),
        ),
        migrations.AlterField(
            model_name='contact',
            name='name',
            field=models.CharField(max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name='contact',
            name='phone_number',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.DeleteModel(
            name='CustomerContact',
        ),
        migrations.AddField(
            model_name='campgroundstayhistory',
            name='campground',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='stay_history', to='parkstay.Campground'),
        ),
        migrations.AddField(
            model_name='campgroundstayhistory',
            name='reason',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parkstay.MaximumStayReason'),
        ),
        migrations.AddField(
            model_name='campgroundgroup',
            name='campgrounds',
            field=models.ManyToManyField(blank=True, to='parkstay.Campground'),
        ),
        migrations.AddField(
            model_name='campgroundgroup',
            name='members',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bookingvehiclerego',
            name='booking',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regos', to='parkstay.Booking'),
        ),
        migrations.AddField(
            model_name='bookinginvoice',
            name='booking',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='parkstay.Booking'),
        ),
        migrations.AlterUniqueTogether(
            name='bookingvehiclerego',
            unique_together=set([('booking', 'rego')]),
        ),
        migrations.RunPython(
            code=create_booking_invoice_records,
        ),
        migrations.RunPython(
            code=forward_func,
            reverse_code=reverse_func
        ),
    ]
